// Code generated by counterfeiter. DO NOT EDIT.
package dbservicesfakes

import (
	"sync"

	"github.com/orange-cloudfoundry/logs-service-broker/dbservices"
	"github.com/orange-cloudfoundry/logs-service-broker/model"
	"github.com/prometheus/client_golang/prometheus"
)

type FakeCacher struct {
	LogMetadataStub        func(string, int, prometheus.Labels) (*model.LogMetadata, error)
	logMetadataMutex       sync.RWMutex
	logMetadataArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 prometheus.Labels
	}
	logMetadataReturns struct {
		result1 *model.LogMetadata
		result2 error
	}
	logMetadataReturnsOnCall map[int]struct {
		result1 *model.LogMetadata
		result2 error
	}
	PreCacheStub        func() error
	preCacheMutex       sync.RWMutex
	preCacheArgsForCall []struct {
	}
	preCacheReturns struct {
		result1 error
	}
	preCacheReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCacher) LogMetadata(arg1 string, arg2 int, arg3 prometheus.Labels) (*model.LogMetadata, error) {
	fake.logMetadataMutex.Lock()
	ret, specificReturn := fake.logMetadataReturnsOnCall[len(fake.logMetadataArgsForCall)]
	fake.logMetadataArgsForCall = append(fake.logMetadataArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 prometheus.Labels
	}{arg1, arg2, arg3})
	stub := fake.LogMetadataStub
	fakeReturns := fake.logMetadataReturns
	fake.recordInvocation("LogMetadata", []interface{}{arg1, arg2, arg3})
	fake.logMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCacher) LogMetadataCallCount() int {
	fake.logMetadataMutex.RLock()
	defer fake.logMetadataMutex.RUnlock()
	return len(fake.logMetadataArgsForCall)
}

func (fake *FakeCacher) LogMetadataCalls(stub func(string, int, prometheus.Labels) (*model.LogMetadata, error)) {
	fake.logMetadataMutex.Lock()
	defer fake.logMetadataMutex.Unlock()
	fake.LogMetadataStub = stub
}

func (fake *FakeCacher) LogMetadataArgsForCall(i int) (string, int, prometheus.Labels) {
	fake.logMetadataMutex.RLock()
	defer fake.logMetadataMutex.RUnlock()
	argsForCall := fake.logMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCacher) LogMetadataReturns(result1 *model.LogMetadata, result2 error) {
	fake.logMetadataMutex.Lock()
	defer fake.logMetadataMutex.Unlock()
	fake.LogMetadataStub = nil
	fake.logMetadataReturns = struct {
		result1 *model.LogMetadata
		result2 error
	}{result1, result2}
}

func (fake *FakeCacher) LogMetadataReturnsOnCall(i int, result1 *model.LogMetadata, result2 error) {
	fake.logMetadataMutex.Lock()
	defer fake.logMetadataMutex.Unlock()
	fake.LogMetadataStub = nil
	if fake.logMetadataReturnsOnCall == nil {
		fake.logMetadataReturnsOnCall = make(map[int]struct {
			result1 *model.LogMetadata
			result2 error
		})
	}
	fake.logMetadataReturnsOnCall[i] = struct {
		result1 *model.LogMetadata
		result2 error
	}{result1, result2}
}

func (fake *FakeCacher) PreCache() error {
	fake.preCacheMutex.Lock()
	ret, specificReturn := fake.preCacheReturnsOnCall[len(fake.preCacheArgsForCall)]
	fake.preCacheArgsForCall = append(fake.preCacheArgsForCall, struct {
	}{})
	stub := fake.PreCacheStub
	fakeReturns := fake.preCacheReturns
	fake.recordInvocation("PreCache", []interface{}{})
	fake.preCacheMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCacher) PreCacheCallCount() int {
	fake.preCacheMutex.RLock()
	defer fake.preCacheMutex.RUnlock()
	return len(fake.preCacheArgsForCall)
}

func (fake *FakeCacher) PreCacheCalls(stub func() error) {
	fake.preCacheMutex.Lock()
	defer fake.preCacheMutex.Unlock()
	fake.PreCacheStub = stub
}

func (fake *FakeCacher) PreCacheReturns(result1 error) {
	fake.preCacheMutex.Lock()
	defer fake.preCacheMutex.Unlock()
	fake.PreCacheStub = nil
	fake.preCacheReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCacher) PreCacheReturnsOnCall(i int, result1 error) {
	fake.preCacheMutex.Lock()
	defer fake.preCacheMutex.Unlock()
	fake.PreCacheStub = nil
	if fake.preCacheReturnsOnCall == nil {
		fake.preCacheReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.preCacheReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCacher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.logMetadataMutex.RLock()
	defer fake.logMetadataMutex.RUnlock()
	fake.preCacheMutex.RLock()
	defer fake.preCacheMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCacher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbservices.Cacher = new(FakeCacher)
